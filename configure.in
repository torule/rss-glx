# Process this file with autoconf to produce a configure script.
AC_INIT(src/driver.c)
AM_INIT_AUTOMAKE(rss-glx,0.9.0)
AM_CONFIG_HEADER(config.h)

# Checks for programs.
AC_PROG_AWK

AC_USE_SYSTEM_EXTENSIONS
AM_PROG_CC_C_O
AC_PROG_CC_C99
AC_C_BIGENDIAN

if test "x$GCC" = xyes; then
	CFLAGS="-O2"
fi
AC_ARG_ENABLE([debug], [AC_HELP_STRING([--enable-debug],
    [build with debugging information default=no])],
    [test "$enableval" = "yes" && CFLAGS="-g"])
if test "x$GCC" = xyes; then
	CFLAGS="$CFLAGS -Wall"
fi

AC_PROG_CXX

if test "x$GXX" = xyes; then
	CXXFLAGS="-O2"
fi
AC_ARG_ENABLE([debug], [AC_HELP_STRING([--enable-debug],
    [build with debugging information default=no])],
    [test "$enableval" = "yes" && CXXFLAGS="-g"])
if test "x$GXX" = xyes; then
	CXXFLAGS="$CXXFLAGS -Wall"
fi

AC_PROG_INSTALL
AM_DISABLE_SHARED
AC_PROG_LIBTOOL
AC_PROG_LN_S

# Checks for libraries.
AC_CHECK_LIB([m], [pow],,AC_MSG_ERROR(-lm was not found but required.))

AC_ARG_ENABLE(bzip2, [  --disable-bzip2         Don't compress textures/audio with bzip2.])
if test "x$enable_bzip2" != "xno" ; then
	AC_CHECK_LIB([bz2], [BZ2_bzBuffToBuffCompress], AC_SUBST(BZIP2, -lbz2) AC_DEFINE([HAVE_LIBBZ2], [], [libbz2 exists.]))
fi

# Checks for header files.
AC_HEADER_STDC
AC_PATH_XTRA 

if test "x${ac_cv_have_x:0:10}" != "xhave_x=yes"; then
	AC_MSG_ERROR([X11 is missing but required.])
fi

CFLAGS="$CFLAGS $X_CFLAGS"
CPPFLAGS="$CPPFLAGS $X_CFLAGS"
LIBS="$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS $LIBS"

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_HEADER_TIME

# Checks for library functions.
AC_CHECK_FUNCS(getopt,,AC_MSG_ERROR([getopt is missing but required.]))
AC_CHECK_HEADERS([getopt.h bzlib.h])

AC_CHECK_FUNCS(gettimeofday,,AC_MSG_ERROR([gettimeofday is missing but required.]))

AC_CHECK_FUNCS(nanosleep)
if test "x$ac_cv_func_nanosleep" = "xno" ; then
	echo "Hrm, maybe nanosleep is in -lrt";
	AC_CHECK_LIB([rt], [nanosleep])

	unset ac_cv_func_nanosleep
	AC_CHECK_FUNCS(nanosleep)
fi

AC_CHECK_FUNCS(random_r nrand48)

# Check for ImageMagick.
PKG_CHECK_MODULES(Wand, Wand >= 6.4)

if test -d src/skyrocket_sounds ; then
	AC_ARG_ENABLE(sound, [  --disable-sound         Don't compile with sound.])
else
	echo "Audio samples not found, disabling sound.";
	enable_sound=no
fi

if test "x$enable_sound" != "xno" ; then
	PKG_CHECK_MODULES(freealut, freealut >= 1.0.0, AM_CONDITIONAL(WITHSOUND, true) AC_DEFINE([HAVE_OPENAL], , [OpenAL is available for use.]), AM_CONDITIONAL(WITHSOUND, false))
else
	AM_CONDITIONAL(WITHSOUND, false)
fi

AC_CHECK_HEADERS([pthread.h])
if test "x$ac_cv_header_pthread_h" = "xyes" ; then
	# Maybe we don't need to link squat
	AC_CHECK_FUNCS(pthread_create)

	if test "x$ac_cv_func_pthread_create" = "xno" ; then
		AC_CHECK_LIB([pthread], [pthread_create], AC_SUBST(PTHREAD_LIBS, "-lpthread"))

		if test "x$ac_cv_lib_pthread_pthread_create" = "xno" ; then
			AC_CHECK_LIB([c_r], [pthread_create], AC_SUBST(PTHREAD_LIBS, "-lc_r"))

			if test "x$ac_cv_lib_c_r_pthread_create" = "xno"; then
				missing_pthread=yes
			fi
		fi
	fi
else
	missing_pthread=yes
fi

if test "x$missing_pthread" = "xyes" ; then
	AC_MSG_ERROR([pthreads is missing but required.])
fi

# Check for OpenGL headers first.
AC_CHECK_HEADER([GL/gl.h])

if test "x$ac_cv_header_GL_gl_h" = "xno" ; then
	CFLAGS="$CFLAGS -I/usr/openwin/share/include"
	CPPFLAGS="$CPPFLAGS -I/usr/openwin/share/include"

	echo "Hrm, maybe GL/gl.h is in /usr/openwin/share/include";
	unset ac_cv_header_GL_gl_h
	AC_CHECK_HEADER(GL/gl.h,,AC_MSG_ERROR([[No gl.h found.]]))
fi

AC_CHECK_HEADER([GL/glx.h],,AC_MSG_ERROR([[No glx.h found.]]))

AC_CHECK_LIB([GL],[glNewList])
if test "x$ac_cv_lib_GL_glNewList" = "xno" ; then
        dnl Check for MesaGL.
        AC_CHECK_LIB([MesaGL],[glNewList],,AC_MSG_ERROR(GL library was not found.))
fi

# Check for GLU headers.
AC_CHECK_HEADER(GL/glu.h,,AC_MSG_ERROR([[No glu.h found.]]))

AC_CHECK_LIB([GLU],[gluLookAt])
if test "x$ac_cv_lib_GLU_gluLookAt" = "xno"; then
        dnl Check for MesaGLU.
        AC_CHECK_LIB([MesaGLU],[gluLookAt],,AC_MSG_ERROR(GLU library was not found.))
fi

AC_CHECK_HEADERS([GL/glew.h])

if test "x$ac_cv_header_GL_glew_h" = "xyes" ; then
	AC_CHECK_LIB([GLEW], [glewInit], AC_SUBST(GLEW, -lGLEW) AC_DEFINE([HAVE_GLEW], , [GLEW is available for use.]), AC_MSG_ERROR([Install GLEW 1.3.1 or better]))
	AM_CONDITIONAL(WITHGLEW, test "x$ac_cv_lib_GLEW_glewInit" = "xyes")
else
	AM_CONDITIONAL(WITHGLEW, false)
fi

AC_CHECK_HEADER([X11/extensions/dpms.h], AC_SEARCH_LIBS([DPMSInfo], [Xext], AC_DEFINE([HAVE_DPMS_EXT], [], [DPMS exists.])), [], [#include <X11/Xlib.h>])

AC_ARG_WITH(configdir, [  --with-configdir        Where is xscreensaver stashing its screensaver configs?])

if test "$with_configdir" != "" ; then
	AC_SUBST(configdir, $with_configdir)
	INSTALL_XSCREENSAVER_CONFIG_FILES=yes
else 
	which_xscreensaverdemo=`which xscreensaver-demo 2> /dev/null`
	if test -x "$which_xscreensaverdemo" ; then
		with_configdir=`strings $which_xscreensaverdemo | grep "\/config"`

		if test -d "$with_configdir" ; then
			AC_SUBST(configdir, $with_configdir)
			INSTALL_XSCREENSAVER_CONFIG_FILES=yes
		fi
	fi
fi

AM_CONDITIONAL(INSTALL_XSCREENSAVER_CONFIG_FILES, test "$INSTALL_XSCREENSAVER_CONFIG_FILES" = "yes")

AC_ARG_WITH(kdessconfigdir, [  --with-kdessconfigdir   Where is KDE stashing its screensaver configs?])

if test "$with_kdessconfigdir" != "" ; then
	AC_SUBST(kdessconfigdir, $with_kdessconfigdir)
	INSTALL_KDE_CONFIG_FILES=yes
else 
	if `which kde4-config 2> /dev/null`; then
		for ii in `kde4-config --path services | sed -e 's/:/\n/g' | grep \`kde4-config --prefix\``; do
			with_kdessconfigdir=$ii/ScreenSavers

			if test -d "$with_kdessconfigdir" ; then
				AC_SUBST(kdessconfigdir, $with_kdessconfigdir)
				INSTALL_KDE_CONFIG_FILES=yes
				break
			fi
		done
	fi
fi

AM_CONDITIONAL(INSTALL_KDE_CONFIG_FILES, test "$INSTALL_KDE_CONFIG_FILES" = "yes")

PKG_CHECK_MODULES(quesoglc, quesoglc >= 0.7, AC_DEFINE([HAVE_GLC], , [QuesoGLC is available for use.]), AC_DEFINE([MISSING_GLC], , [QuesoGLC not available.]))

AC_OUTPUT([
	Makefile
	src/Makefile
	src/Implicit/Makefile
	src/rsMath/Makefile
	src/PixelCity/Makefile
	utils/Makefile
])
